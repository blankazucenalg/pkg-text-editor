/**
 * text-render directive
 * Render html formatted text using format generated by text-editor directive
 * @author Blanca LÃ³pez<blanca.lopez@data4.mx>
 * @since Dec 15, 2017
 */
(function() {
  'use strict';

  angular 
    .module('pkg-text-editor')
    .directive('textRender', textRender);

  /** @ngInject */
  function textRender($sce) {
    return {
      restrict: 'E',
      template: '<div ng-bind-html="htmlToRender"></div>',
      link: linkFunction,
      require: '?ngModel',
      scope: {
        ngModel: '=',
        limitChars: '=',
        limitParagraphs: '='
      }
    };

    function linkFunction(scope, element, attrs, ngModel) {
      scope.limit = scope.limitChars;
      if (!scope.limitChars) {
        if (!scope.limitParagraphs) {
          scope.limit = -1;
        }
      }
      if (!ngModel) {
        console.log('No ngModel');
        return;
      }

      ngModel.$formatters.push(function (modelValue) {
        return modelValue;
      });

      ngModel.$parsers.push(function (viewValue) {
        var trusted = $sce.getTrustedHtml(viewValue);
        trusted = trusted.split('[').join('&#91;').split(']').join('&#93;').split('<').join('[').split('>').join(']');
        return trusted;
      });

      scope.$watch('htmlToRender', function () {
        ngModel.$setViewValue(scope.htmlToRender);
      });

      ngModel.$render = function () {
        scope.htmlToRender = scope.unparseModel(ngModel.$viewValue);
      };

      scope.unparseModel = function (modelValue) {
        var res = modelValue;
        if (modelValue && modelValue.length > 1) {
          res = modelValue.split('[').join('<').split(']').join('>');
          if (scope.limitParagraphs) {
            var text = res.split('</div>')[0].split('<br>');
            res = text[0].length > 5 ? text[0] : text[1];
            res += '...';
          } else if (scope.limitChars) {
            res = res.slice(0, scope.limitChars) + '...';
          }
        }
        return $sce.getTrustedHtml(res);
      }
    }
  }
})(); 